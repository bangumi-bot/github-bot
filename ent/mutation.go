// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github-bot/ent/predicate"
	"github-bot/ent/pulls"
	"github-bot/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePulls = "Pulls"
	TypeUser  = "User"
)

// PullsMutation represents an operation that mutates the Pulls nodes in the graph.
type PullsMutation struct {
	config
	op              Op
	typ             string
	id              *int
	owner           *string
	repo            *string
	number          *int
	addnumber       *int
	comment         *int64
	addcomment      *int64
	createdAt       *time.Time
	mergedAt        *time.Time
	checkRunID      *int64
	addcheckRunID   *int64
	checkRunResult  *string
	headSha         *string
	clearedFields   map[string]struct{}
	_Creator        *int
	cleared_Creator bool
	done            bool
	oldValue        func(context.Context) (*Pulls, error)
	predicates      []predicate.Pulls
}

var _ ent.Mutation = (*PullsMutation)(nil)

// pullsOption allows management of the mutation configuration using functional options.
type pullsOption func(*PullsMutation)

// newPullsMutation creates new mutation for the Pulls entity.
func newPullsMutation(c config, op Op, opts ...pullsOption) *PullsMutation {
	m := &PullsMutation{
		config:        c,
		op:            op,
		typ:           TypePulls,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPullsID sets the ID field of the mutation.
func withPullsID(id int) pullsOption {
	return func(m *PullsMutation) {
		var (
			err   error
			once  sync.Once
			value *Pulls
		)
		m.oldValue = func(ctx context.Context) (*Pulls, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pulls.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPulls sets the old Pulls of the mutation.
func withPulls(node *Pulls) pullsOption {
	return func(m *PullsMutation) {
		m.oldValue = func(context.Context) (*Pulls, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PullsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PullsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PullsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PullsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pulls.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwner sets the "owner" field.
func (m *PullsMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *PullsMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the Pulls entity.
// If the Pulls object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PullsMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *PullsMutation) ResetOwner() {
	m.owner = nil
}

// SetRepo sets the "repo" field.
func (m *PullsMutation) SetRepo(s string) {
	m.repo = &s
}

// Repo returns the value of the "repo" field in the mutation.
func (m *PullsMutation) Repo() (r string, exists bool) {
	v := m.repo
	if v == nil {
		return
	}
	return *v, true
}

// OldRepo returns the old "repo" field's value of the Pulls entity.
// If the Pulls object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PullsMutation) OldRepo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepo: %w", err)
	}
	return oldValue.Repo, nil
}

// ResetRepo resets all changes to the "repo" field.
func (m *PullsMutation) ResetRepo() {
	m.repo = nil
}

// SetNumber sets the "number" field.
func (m *PullsMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *PullsMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Pulls entity.
// If the Pulls object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PullsMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *PullsMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *PullsMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *PullsMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetComment sets the "comment" field.
func (m *PullsMutation) SetComment(i int64) {
	m.comment = &i
	m.addcomment = nil
}

// Comment returns the value of the "comment" field in the mutation.
func (m *PullsMutation) Comment() (r int64, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Pulls entity.
// If the Pulls object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PullsMutation) OldComment(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// AddComment adds i to the "comment" field.
func (m *PullsMutation) AddComment(i int64) {
	if m.addcomment != nil {
		*m.addcomment += i
	} else {
		m.addcomment = &i
	}
}

// AddedComment returns the value that was added to the "comment" field in this mutation.
func (m *PullsMutation) AddedComment() (r int64, exists bool) {
	v := m.addcomment
	if v == nil {
		return
	}
	return *v, true
}

// ClearComment clears the value of the "comment" field.
func (m *PullsMutation) ClearComment() {
	m.comment = nil
	m.addcomment = nil
	m.clearedFields[pulls.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *PullsMutation) CommentCleared() bool {
	_, ok := m.clearedFields[pulls.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *PullsMutation) ResetComment() {
	m.comment = nil
	m.addcomment = nil
	delete(m.clearedFields, pulls.FieldComment)
}

// SetCreatedAt sets the "createdAt" field.
func (m *PullsMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *PullsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Pulls entity.
// If the Pulls object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PullsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *PullsMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetMergedAt sets the "mergedAt" field.
func (m *PullsMutation) SetMergedAt(t time.Time) {
	m.mergedAt = &t
}

// MergedAt returns the value of the "mergedAt" field in the mutation.
func (m *PullsMutation) MergedAt() (r time.Time, exists bool) {
	v := m.mergedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldMergedAt returns the old "mergedAt" field's value of the Pulls entity.
// If the Pulls object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PullsMutation) OldMergedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMergedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMergedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMergedAt: %w", err)
	}
	return oldValue.MergedAt, nil
}

// ClearMergedAt clears the value of the "mergedAt" field.
func (m *PullsMutation) ClearMergedAt() {
	m.mergedAt = nil
	m.clearedFields[pulls.FieldMergedAt] = struct{}{}
}

// MergedAtCleared returns if the "mergedAt" field was cleared in this mutation.
func (m *PullsMutation) MergedAtCleared() bool {
	_, ok := m.clearedFields[pulls.FieldMergedAt]
	return ok
}

// ResetMergedAt resets all changes to the "mergedAt" field.
func (m *PullsMutation) ResetMergedAt() {
	m.mergedAt = nil
	delete(m.clearedFields, pulls.FieldMergedAt)
}

// SetCheckRunID sets the "checkRunID" field.
func (m *PullsMutation) SetCheckRunID(i int64) {
	m.checkRunID = &i
	m.addcheckRunID = nil
}

// CheckRunID returns the value of the "checkRunID" field in the mutation.
func (m *PullsMutation) CheckRunID() (r int64, exists bool) {
	v := m.checkRunID
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckRunID returns the old "checkRunID" field's value of the Pulls entity.
// If the Pulls object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PullsMutation) OldCheckRunID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCheckRunID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCheckRunID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckRunID: %w", err)
	}
	return oldValue.CheckRunID, nil
}

// AddCheckRunID adds i to the "checkRunID" field.
func (m *PullsMutation) AddCheckRunID(i int64) {
	if m.addcheckRunID != nil {
		*m.addcheckRunID += i
	} else {
		m.addcheckRunID = &i
	}
}

// AddedCheckRunID returns the value that was added to the "checkRunID" field in this mutation.
func (m *PullsMutation) AddedCheckRunID() (r int64, exists bool) {
	v := m.addcheckRunID
	if v == nil {
		return
	}
	return *v, true
}

// ResetCheckRunID resets all changes to the "checkRunID" field.
func (m *PullsMutation) ResetCheckRunID() {
	m.checkRunID = nil
	m.addcheckRunID = nil
}

// SetCheckRunResult sets the "checkRunResult" field.
func (m *PullsMutation) SetCheckRunResult(s string) {
	m.checkRunResult = &s
}

// CheckRunResult returns the value of the "checkRunResult" field in the mutation.
func (m *PullsMutation) CheckRunResult() (r string, exists bool) {
	v := m.checkRunResult
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckRunResult returns the old "checkRunResult" field's value of the Pulls entity.
// If the Pulls object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PullsMutation) OldCheckRunResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCheckRunResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCheckRunResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckRunResult: %w", err)
	}
	return oldValue.CheckRunResult, nil
}

// ResetCheckRunResult resets all changes to the "checkRunResult" field.
func (m *PullsMutation) ResetCheckRunResult() {
	m.checkRunResult = nil
}

// SetHeadSha sets the "headSha" field.
func (m *PullsMutation) SetHeadSha(s string) {
	m.headSha = &s
}

// HeadSha returns the value of the "headSha" field in the mutation.
func (m *PullsMutation) HeadSha() (r string, exists bool) {
	v := m.headSha
	if v == nil {
		return
	}
	return *v, true
}

// OldHeadSha returns the old "headSha" field's value of the Pulls entity.
// If the Pulls object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PullsMutation) OldHeadSha(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeadSha is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeadSha requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeadSha: %w", err)
	}
	return oldValue.HeadSha, nil
}

// ResetHeadSha resets all changes to the "headSha" field.
func (m *PullsMutation) ResetHeadSha() {
	m.headSha = nil
}

// SetCreatorID sets the "Creator" edge to the User entity by id.
func (m *PullsMutation) SetCreatorID(id int) {
	m._Creator = &id
}

// ClearCreator clears the "Creator" edge to the User entity.
func (m *PullsMutation) ClearCreator() {
	m.cleared_Creator = true
}

// CreatorCleared reports if the "Creator" edge to the User entity was cleared.
func (m *PullsMutation) CreatorCleared() bool {
	return m.cleared_Creator
}

// CreatorID returns the "Creator" edge ID in the mutation.
func (m *PullsMutation) CreatorID() (id int, exists bool) {
	if m._Creator != nil {
		return *m._Creator, true
	}
	return
}

// CreatorIDs returns the "Creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *PullsMutation) CreatorIDs() (ids []int) {
	if id := m._Creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "Creator" edge.
func (m *PullsMutation) ResetCreator() {
	m._Creator = nil
	m.cleared_Creator = false
}

// Where appends a list predicates to the PullsMutation builder.
func (m *PullsMutation) Where(ps ...predicate.Pulls) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PullsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PullsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Pulls, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PullsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PullsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Pulls).
func (m *PullsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PullsMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.owner != nil {
		fields = append(fields, pulls.FieldOwner)
	}
	if m.repo != nil {
		fields = append(fields, pulls.FieldRepo)
	}
	if m.number != nil {
		fields = append(fields, pulls.FieldNumber)
	}
	if m.comment != nil {
		fields = append(fields, pulls.FieldComment)
	}
	if m.createdAt != nil {
		fields = append(fields, pulls.FieldCreatedAt)
	}
	if m.mergedAt != nil {
		fields = append(fields, pulls.FieldMergedAt)
	}
	if m.checkRunID != nil {
		fields = append(fields, pulls.FieldCheckRunID)
	}
	if m.checkRunResult != nil {
		fields = append(fields, pulls.FieldCheckRunResult)
	}
	if m.headSha != nil {
		fields = append(fields, pulls.FieldHeadSha)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PullsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pulls.FieldOwner:
		return m.Owner()
	case pulls.FieldRepo:
		return m.Repo()
	case pulls.FieldNumber:
		return m.Number()
	case pulls.FieldComment:
		return m.Comment()
	case pulls.FieldCreatedAt:
		return m.CreatedAt()
	case pulls.FieldMergedAt:
		return m.MergedAt()
	case pulls.FieldCheckRunID:
		return m.CheckRunID()
	case pulls.FieldCheckRunResult:
		return m.CheckRunResult()
	case pulls.FieldHeadSha:
		return m.HeadSha()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PullsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pulls.FieldOwner:
		return m.OldOwner(ctx)
	case pulls.FieldRepo:
		return m.OldRepo(ctx)
	case pulls.FieldNumber:
		return m.OldNumber(ctx)
	case pulls.FieldComment:
		return m.OldComment(ctx)
	case pulls.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pulls.FieldMergedAt:
		return m.OldMergedAt(ctx)
	case pulls.FieldCheckRunID:
		return m.OldCheckRunID(ctx)
	case pulls.FieldCheckRunResult:
		return m.OldCheckRunResult(ctx)
	case pulls.FieldHeadSha:
		return m.OldHeadSha(ctx)
	}
	return nil, fmt.Errorf("unknown Pulls field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PullsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pulls.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case pulls.FieldRepo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepo(v)
		return nil
	case pulls.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case pulls.FieldComment:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case pulls.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pulls.FieldMergedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMergedAt(v)
		return nil
	case pulls.FieldCheckRunID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckRunID(v)
		return nil
	case pulls.FieldCheckRunResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckRunResult(v)
		return nil
	case pulls.FieldHeadSha:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeadSha(v)
		return nil
	}
	return fmt.Errorf("unknown Pulls field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PullsMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, pulls.FieldNumber)
	}
	if m.addcomment != nil {
		fields = append(fields, pulls.FieldComment)
	}
	if m.addcheckRunID != nil {
		fields = append(fields, pulls.FieldCheckRunID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PullsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pulls.FieldNumber:
		return m.AddedNumber()
	case pulls.FieldComment:
		return m.AddedComment()
	case pulls.FieldCheckRunID:
		return m.AddedCheckRunID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PullsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pulls.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	case pulls.FieldComment:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddComment(v)
		return nil
	case pulls.FieldCheckRunID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCheckRunID(v)
		return nil
	}
	return fmt.Errorf("unknown Pulls numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PullsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(pulls.FieldComment) {
		fields = append(fields, pulls.FieldComment)
	}
	if m.FieldCleared(pulls.FieldMergedAt) {
		fields = append(fields, pulls.FieldMergedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PullsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PullsMutation) ClearField(name string) error {
	switch name {
	case pulls.FieldComment:
		m.ClearComment()
		return nil
	case pulls.FieldMergedAt:
		m.ClearMergedAt()
		return nil
	}
	return fmt.Errorf("unknown Pulls nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PullsMutation) ResetField(name string) error {
	switch name {
	case pulls.FieldOwner:
		m.ResetOwner()
		return nil
	case pulls.FieldRepo:
		m.ResetRepo()
		return nil
	case pulls.FieldNumber:
		m.ResetNumber()
		return nil
	case pulls.FieldComment:
		m.ResetComment()
		return nil
	case pulls.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pulls.FieldMergedAt:
		m.ResetMergedAt()
		return nil
	case pulls.FieldCheckRunID:
		m.ResetCheckRunID()
		return nil
	case pulls.FieldCheckRunResult:
		m.ResetCheckRunResult()
		return nil
	case pulls.FieldHeadSha:
		m.ResetHeadSha()
		return nil
	}
	return fmt.Errorf("unknown Pulls field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PullsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Creator != nil {
		edges = append(edges, pulls.EdgeCreator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PullsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pulls.EdgeCreator:
		if id := m._Creator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PullsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PullsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PullsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Creator {
		edges = append(edges, pulls.EdgeCreator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PullsMutation) EdgeCleared(name string) bool {
	switch name {
	case pulls.EdgeCreator:
		return m.cleared_Creator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PullsMutation) ClearEdge(name string) error {
	switch name {
	case pulls.EdgeCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown Pulls unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PullsMutation) ResetEdge(name string) error {
	switch name {
	case pulls.EdgeCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown Pulls edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	github_id            *int64
	addgithub_id         *int64
	bangumi_id           *int64
	addbangumi_id        *int64
	clearedFields        map[string]struct{}
	pull_requests        map[int]struct{}
	removedpull_requests map[int]struct{}
	clearedpull_requests bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGithubID sets the "github_id" field.
func (m *UserMutation) SetGithubID(i int64) {
	m.github_id = &i
	m.addgithub_id = nil
}

// GithubID returns the value of the "github_id" field in the mutation.
func (m *UserMutation) GithubID() (r int64, exists bool) {
	v := m.github_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGithubID returns the old "github_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGithubID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGithubID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGithubID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGithubID: %w", err)
	}
	return oldValue.GithubID, nil
}

// AddGithubID adds i to the "github_id" field.
func (m *UserMutation) AddGithubID(i int64) {
	if m.addgithub_id != nil {
		*m.addgithub_id += i
	} else {
		m.addgithub_id = &i
	}
}

// AddedGithubID returns the value that was added to the "github_id" field in this mutation.
func (m *UserMutation) AddedGithubID() (r int64, exists bool) {
	v := m.addgithub_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetGithubID resets all changes to the "github_id" field.
func (m *UserMutation) ResetGithubID() {
	m.github_id = nil
	m.addgithub_id = nil
}

// SetBangumiID sets the "bangumi_id" field.
func (m *UserMutation) SetBangumiID(i int64) {
	m.bangumi_id = &i
	m.addbangumi_id = nil
}

// BangumiID returns the value of the "bangumi_id" field in the mutation.
func (m *UserMutation) BangumiID() (r int64, exists bool) {
	v := m.bangumi_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBangumiID returns the old "bangumi_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBangumiID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBangumiID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBangumiID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBangumiID: %w", err)
	}
	return oldValue.BangumiID, nil
}

// AddBangumiID adds i to the "bangumi_id" field.
func (m *UserMutation) AddBangumiID(i int64) {
	if m.addbangumi_id != nil {
		*m.addbangumi_id += i
	} else {
		m.addbangumi_id = &i
	}
}

// AddedBangumiID returns the value that was added to the "bangumi_id" field in this mutation.
func (m *UserMutation) AddedBangumiID() (r int64, exists bool) {
	v := m.addbangumi_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearBangumiID clears the value of the "bangumi_id" field.
func (m *UserMutation) ClearBangumiID() {
	m.bangumi_id = nil
	m.addbangumi_id = nil
	m.clearedFields[user.FieldBangumiID] = struct{}{}
}

// BangumiIDCleared returns if the "bangumi_id" field was cleared in this mutation.
func (m *UserMutation) BangumiIDCleared() bool {
	_, ok := m.clearedFields[user.FieldBangumiID]
	return ok
}

// ResetBangumiID resets all changes to the "bangumi_id" field.
func (m *UserMutation) ResetBangumiID() {
	m.bangumi_id = nil
	m.addbangumi_id = nil
	delete(m.clearedFields, user.FieldBangumiID)
}

// AddPullRequestIDs adds the "pull_requests" edge to the Pulls entity by ids.
func (m *UserMutation) AddPullRequestIDs(ids ...int) {
	if m.pull_requests == nil {
		m.pull_requests = make(map[int]struct{})
	}
	for i := range ids {
		m.pull_requests[ids[i]] = struct{}{}
	}
}

// ClearPullRequests clears the "pull_requests" edge to the Pulls entity.
func (m *UserMutation) ClearPullRequests() {
	m.clearedpull_requests = true
}

// PullRequestsCleared reports if the "pull_requests" edge to the Pulls entity was cleared.
func (m *UserMutation) PullRequestsCleared() bool {
	return m.clearedpull_requests
}

// RemovePullRequestIDs removes the "pull_requests" edge to the Pulls entity by IDs.
func (m *UserMutation) RemovePullRequestIDs(ids ...int) {
	if m.removedpull_requests == nil {
		m.removedpull_requests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.pull_requests, ids[i])
		m.removedpull_requests[ids[i]] = struct{}{}
	}
}

// RemovedPullRequests returns the removed IDs of the "pull_requests" edge to the Pulls entity.
func (m *UserMutation) RemovedPullRequestsIDs() (ids []int) {
	for id := range m.removedpull_requests {
		ids = append(ids, id)
	}
	return
}

// PullRequestsIDs returns the "pull_requests" edge IDs in the mutation.
func (m *UserMutation) PullRequestsIDs() (ids []int) {
	for id := range m.pull_requests {
		ids = append(ids, id)
	}
	return
}

// ResetPullRequests resets all changes to the "pull_requests" edge.
func (m *UserMutation) ResetPullRequests() {
	m.pull_requests = nil
	m.clearedpull_requests = false
	m.removedpull_requests = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.github_id != nil {
		fields = append(fields, user.FieldGithubID)
	}
	if m.bangumi_id != nil {
		fields = append(fields, user.FieldBangumiID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldGithubID:
		return m.GithubID()
	case user.FieldBangumiID:
		return m.BangumiID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldGithubID:
		return m.OldGithubID(ctx)
	case user.FieldBangumiID:
		return m.OldBangumiID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldGithubID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGithubID(v)
		return nil
	case user.FieldBangumiID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBangumiID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addgithub_id != nil {
		fields = append(fields, user.FieldGithubID)
	}
	if m.addbangumi_id != nil {
		fields = append(fields, user.FieldBangumiID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldGithubID:
		return m.AddedGithubID()
	case user.FieldBangumiID:
		return m.AddedBangumiID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldGithubID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGithubID(v)
		return nil
	case user.FieldBangumiID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBangumiID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldBangumiID) {
		fields = append(fields, user.FieldBangumiID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldBangumiID:
		m.ClearBangumiID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldGithubID:
		m.ResetGithubID()
		return nil
	case user.FieldBangumiID:
		m.ResetBangumiID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.pull_requests != nil {
		edges = append(edges, user.EdgePullRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePullRequests:
		ids := make([]ent.Value, 0, len(m.pull_requests))
		for id := range m.pull_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpull_requests != nil {
		edges = append(edges, user.EdgePullRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePullRequests:
		ids := make([]ent.Value, 0, len(m.removedpull_requests))
		for id := range m.removedpull_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpull_requests {
		edges = append(edges, user.EdgePullRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePullRequests:
		return m.clearedpull_requests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePullRequests:
		m.ResetPullRequests()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
