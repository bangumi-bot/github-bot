// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github-bot/ent/pulls"
	"github-bot/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PullsCreate is the builder for creating a Pulls entity.
type PullsCreate struct {
	config
	mutation *PullsMutation
	hooks    []Hook
}

// SetOwner sets the "owner" field.
func (pc *PullsCreate) SetOwner(s string) *PullsCreate {
	pc.mutation.SetOwner(s)
	return pc
}

// SetRepo sets the "repo" field.
func (pc *PullsCreate) SetRepo(s string) *PullsCreate {
	pc.mutation.SetRepo(s)
	return pc
}

// SetGithubID sets the "github_id" field.
func (pc *PullsCreate) SetGithubID(i int64) *PullsCreate {
	pc.mutation.SetGithubID(i)
	return pc
}

// SetComment sets the "comment" field.
func (pc *PullsCreate) SetComment(i int64) *PullsCreate {
	pc.mutation.SetComment(i)
	return pc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (pc *PullsCreate) SetNillableComment(i *int64) *PullsCreate {
	if i != nil {
		pc.SetComment(*i)
	}
	return pc
}

// SetCreatedAt sets the "createdAt" field.
func (pc *PullsCreate) SetCreatedAt(t time.Time) *PullsCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetMergedAt sets the "mergedAt" field.
func (pc *PullsCreate) SetMergedAt(t time.Time) *PullsCreate {
	pc.mutation.SetMergedAt(t)
	return pc
}

// SetNillableMergedAt sets the "mergedAt" field if the given value is not nil.
func (pc *PullsCreate) SetNillableMergedAt(t *time.Time) *PullsCreate {
	if t != nil {
		pc.SetMergedAt(*t)
	}
	return pc
}

// SetCreatorID sets the "Creator" edge to the User entity by ID.
func (pc *PullsCreate) SetCreatorID(id int) *PullsCreate {
	pc.mutation.SetCreatorID(id)
	return pc
}

// SetCreator sets the "Creator" edge to the User entity.
func (pc *PullsCreate) SetCreator(u *User) *PullsCreate {
	return pc.SetCreatorID(u.ID)
}

// Mutation returns the PullsMutation object of the builder.
func (pc *PullsCreate) Mutation() *PullsMutation {
	return pc.mutation
}

// Save creates the Pulls in the database.
func (pc *PullsCreate) Save(ctx context.Context) (*Pulls, error) {
	return withHooks[*Pulls, PullsMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PullsCreate) SaveX(ctx context.Context) *Pulls {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PullsCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PullsCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PullsCreate) check() error {
	if _, ok := pc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Pulls.owner"`)}
	}
	if _, ok := pc.mutation.Repo(); !ok {
		return &ValidationError{Name: "repo", err: errors.New(`ent: missing required field "Pulls.repo"`)}
	}
	if _, ok := pc.mutation.GithubID(); !ok {
		return &ValidationError{Name: "github_id", err: errors.New(`ent: missing required field "Pulls.github_id"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Pulls.createdAt"`)}
	}
	if _, ok := pc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "Creator", err: errors.New(`ent: missing required edge "Pulls.Creator"`)}
	}
	return nil
}

func (pc *PullsCreate) sqlSave(ctx context.Context) (*Pulls, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PullsCreate) createSpec() (*Pulls, *sqlgraph.CreateSpec) {
	var (
		_node = &Pulls{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pulls.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pulls.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Owner(); ok {
		_spec.SetField(pulls.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := pc.mutation.Repo(); ok {
		_spec.SetField(pulls.FieldRepo, field.TypeString, value)
		_node.Repo = value
	}
	if value, ok := pc.mutation.GithubID(); ok {
		_spec.SetField(pulls.FieldGithubID, field.TypeInt64, value)
		_node.GithubID = value
	}
	if value, ok := pc.mutation.Comment(); ok {
		_spec.SetField(pulls.FieldComment, field.TypeInt64, value)
		_node.Comment = &value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(pulls.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.MergedAt(); ok {
		_spec.SetField(pulls.FieldMergedAt, field.TypeTime, value)
		_node.MergedAt = value
	}
	if nodes := pc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pulls.CreatorTable,
			Columns: []string{pulls.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_pull_requests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PullsCreateBulk is the builder for creating many Pulls entities in bulk.
type PullsCreateBulk struct {
	config
	builders []*PullsCreate
}

// Save creates the Pulls entities in the database.
func (pcb *PullsCreateBulk) Save(ctx context.Context) ([]*Pulls, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pulls, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PullsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PullsCreateBulk) SaveX(ctx context.Context) []*Pulls {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PullsCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PullsCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
